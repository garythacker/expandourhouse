package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"

	"expandourhouse.com/mapdata/congresses"
	"expandourhouse.com/mapdata/housedb"
)

/*
For each Congress:
	- # reps
	- Mean # of voters in regular districts
*/

func main() {
	log.SetOutput(os.Stderr)
	ctx := context.Background()

	// connect to DB
	db := housedb.Connect(ctx)
	defer db.Close()

	data := make(map[string]map[string]interface{})
	for _, cong := range congresses.GetAll() {
		stats := make(map[string]interface{})
		if nbrReps := db.NbrReps(ctx, cong.Number); nbrReps > 10 { // weed out implausible numbers
			stats["nbrReps"] = nbrReps
		}
		if medianVoters, ok := db.MedianVotersPerRegDistrict(ctx, cong.Number); ok {
			stats["medianVoters"] = medianVoters
		}
		if minVoters, ok := db.MinVotersPerRegDistrict(ctx, cong.Number); ok {
			stats["minVoters"] = minVoters
		}
		if maxVoters, ok := db.MaxVotersPerRegDistrict(ctx, cong.Number); ok {
			stats["maxVoters"] = maxVoters
		}
		if len(stats) == 0 {
			continue
		}
		data[fmt.Sprintf("%v", cong.Number)] = stats
	}

	os.Stdout.WriteString("/* Generated by compute-stats */\nconst CongressStats = ")
	enc := json.NewEncoder(os.Stdout)
	if err := enc.Encode(data); err != nil {
		panic(err)
	}
	os.Stdout.WriteString(";\nexport {CongressStats};\n")
}
